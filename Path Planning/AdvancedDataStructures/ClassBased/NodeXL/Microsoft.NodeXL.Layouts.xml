<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.NodeXL.Layouts</name>
    </assembly>
    <members>
        <member name="T:Microsoft.NodeXL.Layouts.ILayout">
             <summary>
             Supports laying out a graph within a rectangle.
             </summary>
            
             <remarks>
             A class that implements this interface is responsible for laying out a
             graph within a specified rectangle by setting the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on all of the graph's vertices, and
             optionally adding geometry metadata to the graph, vertices, or edges.
             Laying out a graph is the first step in drawing it.
            
             <para>
             If the layout is slow, you should consider implementing the <see cref="T:Microsoft.NodeXL.Layouts.IAsyncLayout"/> interface instead.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Lays out a graph.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.ILayout.TransformLayout(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Microsoft.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to the new graph rectangle.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>, this
             method can be used to transform the graph's layout from one rectangle
             to another.  <paramref name="originalLayoutContext"/> contains the
             original graph rectangle, and <paramref name="newLayoutContext"/>
             contains the new graph rectangle.  The implementation should transform
             all the graph's vertex locations from the original rectangle to the new
             one.  If <see cref="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/> added geometry metadata to the
             graph, the implementation should also transform that metadata.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.ILayout.OnVertexMove(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.  This method is called
             after the application has changed the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>
             added geometry metadata to the graph, vertices, or edges, <see cref="M:Microsoft.NodeXL.Layouts.ILayout.OnVertexMove(Microsoft.NodeXL.Core.IVertex)"/> should modify the metadata if necessary.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.ILayout.Margin">
             <summary>
             Gets or sets the margin to subtract from each edge of the graph
             rectangle before laying out the graph.
             </summary>
            
             <value>
             The margin to subtract from each edge.  Must be greater than or equal
             to zero.  The units are determined by the <see cref="T:System.Drawing.Graphics"/>
             object used to draw the graph.  The default value is 0.
             </value>
            
             <remarks>
             If the graph rectangle passed to <see cref="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/> is {L=0,
             T=0, R=50, B=30} and the <see cref="P:Microsoft.NodeXL.Layouts.ILayout.Margin"/> is 5, for example, then
             the graph is laid out within the rectangle {L=5, T=5, R=45, B=25}.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.ILayout.SupportsOutOfBoundsVertices">
             <summary>
             Gets a flag indicating whether vertices laid out by the class can fall
             outside the graph bounds.
             </summary>
            
             <value>
             true if the vertices call fall outside the graph bounds.
             </value>
            
             <remarks>
             If true, the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> of the laid-out vertices
             may be within the graph rectangle's margin or outside the graph
             rectangle.  If false, the vertex locations are always within the
             margin.
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Layouts.ILayout.LayoutRequired">
             <summary>
             Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
             The implementation must fire this event when any change is made to the
             object that might affect the layout of the graph, such as a property
             change that affects the layout algorithm.
            
             <para>
             The owner should lay out the graph and redraw it in response to the
             event.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout">
             <summary>
             Lays out a graph using the Harel-Koren fast multiscale algorithm.
             </summary>
            
             <remarks>
             For details on the layout algorithm, see "A Fast Multi-Scale Method for
             Drawing Large Graphs," David Harel and Yehuda Koren, Journal of Graph
             Algorithms and Applications, Vol. 6 No. 3, 2002.
            
             <para>
             Most property names are identical to the names used in the Harel-Koren
             paper.  The exception is Iterations, which is renamed <see cref="P:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.LocalIterations"/>.
             </para>
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, its
             location is left unmodified.
             </para>
            
             <para>
             This class wraps a C# implementation written by Janez Brank at Microsoft
             Research Cambridge in May 2009.  The code from Janez is in the file
             HarelKorenFastMultiscaleLayoutInternal.cs.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.AsyncLayoutBase">
             <summary>
             Base class for asynchronous layouts.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NodeXL.Layouts.IAsyncLayout"/> implementations.  Its implementations of the <see cref="T:Microsoft.NodeXL.Layouts.IAsyncLayout"/> public methods provide error checking but defer the
             actual work to protected abstract methods.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.LayoutBase">
             <summary>
             Base class for layouts.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NodeXL.Layouts.ILayout"/> implementations.  Its implementations of the <see cref="T:Microsoft.NodeXL.Layouts.ILayout"/> public methods provide error checking but defer the
             actual work to protected abstract methods.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.LayoutsBase">
            <summary>
            Base class for most classes in the <see cref="N:Microsoft.NodeXL.Layouts"/>
            namespace.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Layouts.LayoutsBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutsBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.LayoutsBase.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Microsoft.NodeXL.Layouts.LayoutsBase.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Microsoft.NodeXL.Layouts.LayoutsBase.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
            
             <para>
             The <see cref="T:Microsoft.NodeXL.Core.NodeXLBase"/> implementation of this property cannot be
             used because it's marked as internal.  The reason it's internal is
             explained in the comments for the <see cref="P:Microsoft.NodeXL.Layouts.LayoutsBase.ArgumentChecker"/> class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.#ctor">
            <summary>
            Initializes a new instance of the LayoutBase class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Lays out a graph.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.TransformLayout(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Microsoft.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to the new graph rectangle.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>, this
             method can be used to transform the graph's layout from the original
             graph rectangle to another.  <paramref name="originalLayoutContext"/>
             contains the original graph rectangle, and <paramref name="newLayoutContext"/> contains the new graph rectangle.  This
             method transforms all the graph's vertex locations from the original
             rectangle to the new one.  If <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/> added geometry
             metadata to the graph, this method also transforms that metadata.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.OnVertexMove(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.  This method is called
             after the application has changed the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>
             added geometry metadata to the graph, vertices, or edges, <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.OnVertexMove(Microsoft.NodeXL.Core.IVertex)"/> should modify the metadata if necessary.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Lays out a graph.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the vertices in <paramref name="verticesToLayOut"/>, and optionally adding geometry metadata to
             the graph, vertices, or edges.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.TransformLayoutCore(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Microsoft.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to objects needed to transform the graph's layout.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>, this
             method may get called to transform the graph's layout from one rectangle
             to another.  <paramref name="originalLayoutContext"/> contains the
             original graph rectangle, and <paramref name="newLayoutContext"/>
             contains the new graph rectangle.  This base-class implementation
             transforms all the graph's vertex locations from the original rectangle
             to the new one.  If the derived <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext)"/>
             implementation added geometry metadata to the graph, the derived class
             should override this method, transform the geometry metadata, and call
             this base-class implementation to transform the graph's vertex
             locations.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.OnVertexMoveCore(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext)"/>.  This method is called
             after the application has changed the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext)"/> added geometry metadata to the graph,
             vertices, or edges, <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.OnVertexMoveCore(Microsoft.NodeXL.Core.IVertex)"/> should modify the
             metadata if necessary.
            
             <para>
             This base-class implementation does nothing.
             </para>
            
             <para>
             The argument has already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.GetAdjustedLayoutContext(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext,Microsoft.NodeXL.Layouts.LayoutContext@)">
             <summary>
             Gets an adjusted layout context object to use when laying out the
             graph.
             </summary>
            
             <param name="oGraph">
             The graph being laid out.
             </param>
            
             <param name="oOriginalLayoutContext">
             The original layout context passed to the layout method.
             </param>
            
             <param name="oAdjustedLayoutContext">
             If true is returned, this gets set to a copy of <paramref name="oOriginalLayoutContext"/> that has been adjusted.
             </param>
            
             <returns>
             true if the graph can be laid out, false if it can't be.
             </returns>
            
             <remarks>
             This method adjusts the graph rectangle stored in <paramref name="oOriginalLayoutContext"/> according to the <see cref="P:Microsoft.NodeXL.Layouts.LayoutBase.Margin"/> setting and the presence of a <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesWithinBounds"/> key on
             the graph.  If subtracting the margin results in a non-positive width
             or height, false is returned.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.GetRectangleCenterAndHalfSize(System.Drawing.Rectangle,System.Double@,System.Double@,System.Double@)">
             <summary>
             Gets the center of a rectangle and the minimum of half its width and
             half its height.
             </summary>
            
             <param name="rectangle">
             The rectangle to use.
             </param>
            
             <param name="centerX">
             The x-coordinate of the center of <paramref name="rectangle" />.
             </param>
            
             <param name="centerY">
             The y-coordinate of the center of <paramref name="rectangle" />.
             </param>
            
             <param name="halfSize">
             If the width of <paramref name="rectangle" /> is less than its height,
             half the width gets stored here.  Otherwise, half the height gets
             stored here.
             </param>
            
             <remarks>
             This method can be used by layouts that are centered and symetrical.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.GetVerticesToLayOut(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Gets the vertices to lay out.
             </summary>
            
             <param name="graph">
             Graph that is being laid out.
             </param>
            
             <returns>
             The vertices to lay out.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.GetEdgesToLayOut(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex})">
             <summary>
             Gets the edges to lay out.
             </summary>
            
             <param name="graph">
             Graph that is being laid out.
             </param>
            
             <param name="verticesToLayOut">
             The vertices being laid out.
             </param>
            
             <returns>
             The edges to lay out.
             </returns>
            
             <remarks>
             If the derived class needs a list of the edges that connect only those
             vertices being laid out, it should use this method to get the list.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.RandomizeVertexLocations(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)">
             <overloads>
             Randomly distributes the vertex locations in a graph.
             </overloads>
            
             <summary>
             Randomly distributes the vertex locations in a graph using a
             time-dependent default seed value.
             </summary>
            
             <param name="graph">
             Graph whose vertices need to be randomized.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> must have non-zero width and
             height.
             </param>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with the value true,
             its location is left unmodified.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.RandomizeVertexLocations(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext,System.Int32)">
             <summary>
             Randomly distributes the vertex locations in a graph using a specified
             seed value.
             </summary>
            
             <param name="graph">
             Graph whose vertices need to be randomized.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> must have non-zero width and
             height.
             </param>
            
             <param name="seed">
             A number used to calculate a starting value for the pseudo-random
             number sequence. If a negative number is specified, the absolute value
             of the number is used. 
             </param>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with the value true,
             its location is left unmodified.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.RandomizeVertexLocations(System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.Random)">
             <summary>
             Randomly distributes the vertex locations in a graph using a specified
             random number generator.
             </summary>
            
             <param name="vertices">
             Vertices that need to be randomized.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> must have non-zero width and
             height.
             </param>
            
             <param name="random">
             Random number generator.
             </param>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with the value true,
             its location is left unmodified.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.VertexIsLocked(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Returns a flag indicating whether the vertex is locked.
             </summary>
            
             <param name="oVertex">
             The vertex to check.
             </param>
            
             <returns>
             true if the vertex is locked.
             </returns>
            
             <remarks>
             A locked vertex's location should not be modified by the layout,
             although the vertex may be included in layout calculations.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.FireLayoutRequired">
            <summary>
            Fires the <see cref="E:Microsoft.NodeXL.Layouts.LayoutBase.LayoutRequired"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.LayoutBase.m_iMargin">
            Margin to subtract from the graph rectangle before laying out the
            graph.
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.LayoutBase.Margin">
             <summary>
             Gets or sets the margin to subtract from each edge of the graph
             rectangle before laying out the graph.
             </summary>
            
             <value>
             The margin to subtract from each edge.  Must be greater than or equal
             to zero.  The default value is 6.
             </value>
            
             <remarks>
             If the graph rectangle passed to <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/> is {L=0,
             T=0, R=50, B=30} and the <see cref="P:Microsoft.NodeXL.Layouts.LayoutBase.Margin"/> is 5, for example, then
             the graph is laid out within the rectangle {L=5, T=5, R=45, B=25}.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.LayoutBase.SupportsOutOfBoundsVertices">
             <summary>
             Gets a flag indicating whether vertices laid out by the class can fall
             outside the graph bounds.
             </summary>
            
             <value>
             true if the vertices call fall outside the graph bounds.
             </value>
            
             <remarks>
             If true, the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> of the laid-out vertices
             may be within the graph rectangle's margin or outside the graph
             rectangle.  If false, the vertex locations are always within the
             margin.
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Layouts.LayoutBase.LayoutRequired">
             <summary>
             Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
             The event is fired when any change is made to the object that might
             affect the layout of the graph, such as a property change that affects
             the layout algorithm.  The owner should lay out the graph and redraw it
             in response to the event.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.IAsyncLayout">
             <summary>
             Supports laying out a graph within a rectangle using an event-based
             asynchronous pattern.
             </summary>
            
             <remarks>
             This interface adds asynchronous semantics to the <see cref="T:Microsoft.NodeXL.Layouts.ILayout"/>
             base interface.  A class that implements this interface is responsible for
             laying out a graph within a specified rectangle by setting the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on all of the graph's vertices in
             either a synchronous or asynchronous manner, depending on whether <see cref="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/> or <see cref="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/> is called.
             It may also add geometry metadata to the graph, vertices, or edges.
            
             <para>
             The asynchronous semantics follow the guidelines outlined in the article
             "Multithreaded Programming with the Event-based Asynchronous Pattern" in
             the .NET Framework Developer's Guide.  <see cref="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>
             starts the layout on a worker thread and returns immediately.  The <see cref="E:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphIterationCompleted"/> event may fire repeatedly while the
             layout is occurring.  The <see cref="E:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphCompleted"/> event fires
             when the layout is complete, an error occurs, or the layout is cancelled.
             <see cref="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsyncCancel"/> cancels the layout.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Lays out a graph synchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Lays out a graph asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
             This method asynchronously lays out the graph <paramref name="graph"/>.  It returns immediately.  A worker thread sets the
             <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adds geometry metadata to the graph, vertices,
             or edges.
            
             <para>
             The <see cref="E:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphIterationCompleted"/> event may fire
             repeatedly while the layout is occurring.  The <see cref="E:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphCompleted"/> event fires when the layout is complete,
             an error occurs, or the layout is cancelled.  <see cref="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsyncCancel"/> cancels the layout.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsyncCancel">
             <summary>
             Cancels the layout started by <see cref="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.
             </summary>
            
             <remarks>
             The layout may or may not cancel, but the <see cref="E:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphCompleted"/> event is guaranteed to fire.  The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object passed to the event handler
             contains a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property
             that indicates whether the cancellation occurred.
            
             <para>
             If a layout is not in progress, this method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.IAsyncLayout.LayoutStyle">
             <summary>
             Gets or sets the style to use when laying out the graph.
             </summary>
            
             <value>
             The style to use when laying out the graph.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.IAsyncLayout.GroupRectanglePenWidth">
             <summary>
             Gets or sets the width of the pen used to draw group rectangles.
             </summary>
            
             <value>
             The width of the pen used to draw group rectangles.  Must be greater
             than or equal to 0.  If 0, group rectangles aren't drawn.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Microsoft.NodeXL.Layouts.IAsyncLayout.LayoutStyle"/> is not <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.IAsyncLayout.HideIntergroupEdges">
             <summary>
             Gets or sets a flag indicating whether the edges between groups should
             be hidden.
             </summary>
            
             <value>
             true to hide the edges between groups.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Microsoft.NodeXL.Layouts.IAsyncLayout.LayoutStyle"/> is not <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.IAsyncLayout.ImproveLayoutOfGroups">
             <summary>
             Gets or sets a flag indicating whether the layout should attempt to
             improve the appearance of groups.
             </summary>
            
             <value>
             true to attempt to improve the appearance of groups.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Microsoft.NodeXL.Layouts.IAsyncLayout.LayoutStyle"/> is not <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.IAsyncLayout.SupportsBinning">
             <summary>
             Gets a flag indicating whether binning can be used when the entire
             graph is laid out.
             </summary>
            
             <value>
             true if binning can be used.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.IAsyncLayout.MaximumVerticesPerBin">
             <summary>
             Gets or sets the maximum number of vertices a binned component can
             have.
             </summary>
            
             <value>
             The maximum number of vertices a binned component can have.
             </value>
            
             <remarks>
             If <see cref="P:Microsoft.NodeXL.Layouts.IAsyncLayout.LayoutStyle"/> is <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseBinning"/> and a
             strongly connected component of the graph has <see cref="P:Microsoft.NodeXL.Layouts.IAsyncLayout.MaximumVerticesPerBin"/> vertices or fewer, the component is
             placed in a bin.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.IAsyncLayout.BinLength">
             <summary>
             Gets or sets the height and width of each bin, in graph rectangle
             units.
             </summary>
            
             <value>
             The height and width of each bin, in graph rectangle units.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Microsoft.NodeXL.Layouts.IAsyncLayout.LayoutStyle"/> is not <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseBinning"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.IAsyncLayout.IsBusy">
             <summary>
             Gets a value indicating whether an asynchronous operation is in
             progress.
             </summary>
            
             <value>
             true if an asynchronous operation is in progress.
             </value>
        </member>
        <member name="E:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphIterationCompleted">
             <summary>
             Occurs when a layout started by <see cref="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>
             completes one iteration.
             </summary>
            
             <remarks>
             If the implementation uses an iterative layout algorithm, it should
             fire this event after each iteration.  The event handler may draw the
             intermediate graph using the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property
             on all of the graph's vertices.
            
             <para>
             The event fires on the thread on which <see cref="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>
             was called.  Although the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property is
             not required to be thread-safe, it is safe to read the property during
             the event because the implementation's worker thread blocks until the
             event handler returns.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphCompleted">
             <summary>
             Occurs when a layout started by <see cref="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>
             completes, is cancelled, or ends with an error.
             </summary>
            
             <remarks>
             The event fires on the thread on which <see cref="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>
             was called.
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Layouts.IAsyncLayout.LayoutRequired">
             <summary>
             Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
             The implementation must fire this event when any change is made to the
             object that might affect the layout of the graph, such as a property
             change that affects the layout algorithm.
            
             <para>
             The owner should lay out the graph and redraw it in response to the
             event.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Layouts.AsyncLayoutBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Lays out a graph asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
             This method asynchronously lays out the graph <paramref name="graph"/>
             by setting the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on all of the
             graph's vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.  It starts a worker thread and then returns
             immediately.
            
             <para>
             The <see cref="E:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphIterationCompleted"/> event may fire
             repeatedly while the layout is occurring.  The <see cref="E:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphCompleted"/> event fires when the layout is complete,
             an error occurs, or the layout is cancelled.  <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphAsyncCancel"/> cancels the layout.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphAsyncCancel">
             <summary>
             Cancels the layout started by <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.
             </summary>
            
             <remarks>
             The layout may or may not cancel, but the <see cref="E:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphCompleted"/> event is guaranteed to fire.  The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object passed to the event handler
             contains a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property
             that indicates whether the cancellation occurred.
            
             <para>
             If a layout is not in progress, this method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Lays out a graph.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             <para>
             This is the concrete implementation of an abstract virtual method
             defined in <see cref="T:Microsoft.NodeXL.Layouts.LayoutBase"/>.  It delegates the work to a new,
             overloaded abstract virtual method defined in this class.  The new
             overload takes an additional BackgroundWorker argument.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.TransformLayoutCore(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Microsoft.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to objects needed to transform the graph's layout.
             </param>
            
             <remarks>
             The arguments have already been checked for validity.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphOnBackgroundWorker(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Lays out a graph on a BackgroundWorker thread.
             </summary>
            
             <param name="oBackgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method.
             </param>
            
             <param name="oDoWorkEventArgs">
             Asynchronous event arguments.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphOnBackgroundWorkerUsingGroups(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph on a BackgroundWorker thread using groups.
             </summary>
            
             <param name="oGraph">
             The graph to lay out.
             </param>
            
             <param name="oAdjustedLayoutContext">
             The LayoutContext to use.  This has already been adjusted for the
             layout margin.
             </param>
            
             <param name="oBackgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.GetGroupsToLayOut(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.GroupVertexInformation[])">
             <summary>
             Lays out a graph on a BackgroundWorker thread using groups.
             </summary>
            
             <param name="oGraph">
             The graph to lay out.
             </param>
            
             <param name="aoGroupVertexInformation">
             Contains a GroupVertexInformation object for each of the graph's
             groups.
             </param>
            
             <returns>
             A List containing a GroupVertexInformation object for each group of
             vertices that should be laid out in a rectangle, sorted by the number
             of vertices in the group, in descending order.
             </returns>
            
             <remarks>
             This method analyzes the graph's groups and creates a new List of
             groups from them.  Empty and collapsed groups are skipped, and any
             vertices that aren't in a group are put into a new group.  The list is
             then sorted.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.GetLayoutToUseForGroup(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex})">
             <summary>
             Gets the AsyncLayoutBase to use to lay out a group.
             </summary>
            
             <param name="oGraph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="oVerticesInGroup">
             Vertices in the group.  The collection is guaranteed to have at least
             one vertex.
             </param>
            
             <returns>
             The AsyncLayoutBase to use to lay out the group.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted">
             <overloads>
             Fires the <see cref="E:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphIterationCompleted"/> event if
             appropriate.
             </overloads>
            
             <summary>
             Fires the <see cref="E:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphIterationCompleted"/> event if
             appropriate.
             </summary>
            
             <remarks>
             This method should be called from <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)"/> after each layout iteration.  It
             synchronously fires the <see cref="E:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphIterationCompleted"/>
             event on the thread from which <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/> was
             called.
            
             <para>
             Note that the <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/>
             method can't be used to report completion of an iteration.  That's
             because <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/> fires a
             <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> event asynchronously,
             meaning that the worker thread gets back to work immediately without
             waiting for the event handler to return.  Because the worker thread is
             modifying the Location properties of all the graph's vertices, which is
             exactly what the event handler wants to read, the vertex locations
             would not be in a stable state for reading.  Using
             SynchronizationContext to synchronously Send an event solves this
             problem, because the worker thread can't get back to work until the
             event handler returns.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted(System.Object)">
             <summary>
             Fires the <see cref="E:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphIterationCompleted"/> event if
             appropriate.
             </summary>
            
             <param name="oState">
             Required by the SendOrPostCallback method signature, but not used.
             </param>
            
             <remarks>
             This method can be called only from the thread on which <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/> was called.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
             <summary>
             Fires the <see cref="E:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphCompleted"/> event if appropriate.
             </summary>
            
             <param name="oAsyncCompletedEventArgs">
             An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains the event data.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.BackgroundWorker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
             <summary>
             Handles the RunWorkerCompleted event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.AsyncLayoutBase.MaximumGroupEdgeCountToGrid">
            Maximum number of edges in a group for the group to be laid out in a
            grid when m_bImproveLayoutOfGroups is true.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.AsyncLayoutBase.m_eLayoutStyle">
            The style to use when laying out the graph.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.AsyncLayoutBase.m_dGroupRectanglePenWidth">
            The width of the pen used to draw group rectangles.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.AsyncLayoutBase.m_bHideIntergroupEdges">
            true to hide the edges between groups.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.AsyncLayoutBase.m_bImproveLayoutOfGroups">
            true to attempt to improve the appearance of groups.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.AsyncLayoutBase.m_iMaximumVerticesPerBin">
            The maximum number of vertices a binned component can have.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.AsyncLayoutBase.m_iBinLength">
            Height and width of each bin, in graph rectangle units.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.AsyncLayoutBase.m_oBackgroundWorker">
            BackgroundWorker used by LayOutGraphAsync().
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.AsyncLayoutBase.m_oSynchronizationContext">
            SynchronizationContext of the thread that called LayOutGraphAsync(), or
            null if LayOutGraphAsync() hasn't been called.
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayoutStyle">
             <summary>
             Gets or sets the style to use when laying out the graph.
             </summary>
            
             <value>
             The style to use when laying out the graph.  The default value is
             <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.Normal"/>.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.GroupRectanglePenWidth">
             <summary>
             Gets or sets the width of the pen used to draw group rectangles.
             </summary>
            
             <value>
             The width of the pen used to draw group rectangles.  Must be greater
             than or equal to 0.  If 0, group rectangles aren't drawn.  The default
             value is 1.0.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayoutStyle"/> is not <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.HideIntergroupEdges">
             <summary>
             Gets or sets a flag indicating whether the edges between groups should
             be hidden.
             </summary>
            
             <value>
             true to hide the edges between groups.  The default value is false.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayoutStyle"/> is not <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.ImproveLayoutOfGroups">
             <summary>
             Gets or sets a flag indicating whether the layout should attempt to
             improve the appearance of groups.
             </summary>
            
             <value>
             true to attempt to improve the appearance of groups.  The default value
             is false.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayoutStyle"/> is not <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
            
             <para>
             Exactly what "improve" means is left deliberately vague.  As of May
             2011, we are still experimenting with ways to improve the layout of
             groups.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.SupportsBinning">
             <summary>
             Gets a flag indicating whether binning can be used when the entire
             graph is laid out.
             </summary>
            
             <value>
             true if binning can be used.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.MaximumVerticesPerBin">
             <summary>
             Gets or sets the maximum number of vertices a binned component can
             have.
             </summary>
            
             <value>
             The maximum number of vertices a binned component can have.  The
             default value is 3.
             </value>
            
             <remarks>
             If <see cref="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayoutStyle"/> is <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseBinning"/> and a
             strongly connected component of the graph has <see cref="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.MaximumVerticesPerBin"/> vertices or fewer, the component is
             placed in a bin.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.BinLength">
             <summary>
             Gets or sets the height and width of each bin, in graph rectangle
             units.
             </summary>
            
             <value>
             The height and width of each bin, in graph rectangle units.  The
             default value is 16.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayoutStyle"/> is not <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseBinning"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.IsBusy">
             <summary>
             Gets a value indicating whether an asynchronous operation is in
             progress.
             </summary>
            
             <value>
             true if an asynchronous operation is in progress.
             </value>
        </member>
        <member name="E:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphIterationCompleted">
             <summary>
             Occurs when a layout started by <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>
             completes one iteration.
             </summary>
            
             <remarks>
             If the implementation uses an iterative layout algorithm, it should
             fire this event after each iteration.  The event handler may draw the
             intermediate graph using the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property
             on all of the graph's vertices.
            
             <para>
             The event fires on the thread on which <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>
             was called.  Although the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property is
             not required to be thread-safe, it is safe to read the property during
             the event because the implementation's worker thread blocks until the
             event handler returns.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphCompleted">
             <summary>
             Occurs when a layout started by <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>
             completes, is cancelled, or ends with an error.
             </summary>
            
             <remarks>
             The event fires on the thread on which <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>
             was called.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.#ctor">
            <summary>
            Initializes a new instance of the HarelKorenFastMultiscaleLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.m_iRad">
            The "Rad" constant in the Harel-Koren paper.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.m_iLocalIterations">
            The "Iterations" constant in the Harel-Koren paper.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.m_iRatio">
            The "Ratio" constant in the Harel-Koren paper.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.m_iMinSize">
            The "MinSize" constant in the Harel-Koren paper.
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.Rad">
             <summary>
             Gets or sets the constant that determines the radius of local
             neighborhoods.
             </summary>
            
             <value>
             The "Rad" constant in the Harel-Koren paper.  Must be greater than 0.
             The default value is 7.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.LocalIterations">
             <summary>
             Gets or sets the constant that determines the number of iterations used
             for local beautification.
             </summary>
            
             <value>
             The "Iterations" constant in the Harel-Koren paper.  Must be greater
             than 0.  The default value is 10.
             </value>
            
             <remarks>
             This is named LocalIterations because "Iterations" might be confused
             with NodeXL's notion of an iteration, which in the Harel-Koren
             algorithm is the number of coarse graph iterations.  The number of
             coarse graph iterations is determined by the <see cref="P:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.Ratio"/>
             property and the number of vertices in the graph.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.Ratio">
             <summary>
             Gets or sets the ratio between the number of vertices in two coarse
             graph iterations.
             </summary>
            
             <value>
             The "Ratio" constant in the Harel-Koren paper.  Must be greater than 1.
             The default value is 3.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.MinSize">
             <summary>
             Gets or sets the minimum number of clusters in the graph.
             </summary>
            
             <value>
             The "MinSize" constant in the Harel-Koren paper.  Must be greater than
             zero.  The default value is 10.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.RandomLayout">
             <summary>
             Lays out a graph by placing the vertices in random locations.
             </summary>
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.RandomLayout.#ctor">
            <summary>
            Initializes a new instance of the RandomLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.RandomLayout.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.RandomLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.PolarLayout">
             <summary>
             Lays out a graph by placing the vertices within a polar coordinate space.
             </summary>
            
             <remarks>
             This layout defines a polar coordinate space that uses (R, Angle) to
             specify a point.
            
             <para>
             R represents the distance of the point from the origin, which is the center
             of the graph rectangle.  0.0 represents the origin and 1.0 represents the
             maximum distance from the origin, which is the smaller of half the graph
             rectangle's width or height.  R values less than 0.0 are the same as 0.0,
             and R values greater than 1.0 are the same as 1.0.
             </para>
            
             <para>
             Angle is in degrees.  0.0 represents points on the positive x-axis and 90.0
             represents points on the positive y-axis.  Any angle is valid.  361.0
             degrees is the same as 1.0 degree, for example, and -1.0 degree is the same
             as 359.0 degrees.
             </para>
            
             <para>
             To specify the polar coordinates of a vertex, add the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PolarLayoutCoordinates"/> key to the vertex.
             If a vertex is missing this key, the vertex is placed at the origin.
             </para>
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, its
             location is left unmodified.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.PolarLayoutBase">
            <summary>
            Base class for classes that lay out a graph by placing the vertices within
            a polar coordinate space.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.PolarLayoutBase.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the PolarLayoutBase class.
             </summary>
            
             <param name="polarRIsAbsolute">
             If true, the polar R coordinates are in WPF units and have no upper
             limit.  If false, the polar R coordinates can vary from 0.0 to 1.0, and
             1.0 represents half of either the graph rectangle height or width,
             whichever is smaller.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.PolarLayoutBase.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.PolarLayoutBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.PolarLayoutBase.m_bPolarRIsAbsolute">
            If true, the polar R coordinates are in WPF units and have no upper
            limit.  If false, the polar R coordinates can vary from 0.0 to 1.0, and
            1.0 represents half of either the graph rectangle height or width,
            whichever is smaller.
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.PolarLayout.#ctor">
            <summary>
            Initializes a new instance of the PolarLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.PolarLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.LayoutContext">
            <summary>
            Provides access to objects needed for laying out a graph.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutContext.#ctor(System.Drawing.Rectangle)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Layouts.LayoutContext"/> class.
             </summary>
            
             <param name="graphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out
             within.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutContext.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.LayoutContext.m_oGraphRectangle">
            The Rectangle the graph is being laid out within.
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle">
             <summary>
             Gets the <see cref="T:System.Drawing.Rectangle"/> the graph is being
             laid out within.
             </summary>
            
             <value>
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out
             within.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.SugiyamaLayout">
             <summary>
             Lays out a graph using the Sugiyama layered layout scheme.
             </summary>
            
             <remarks>
             This layout uses an algorithm based on Sugiyama's layered layout scheme.
             It is implemented with the Microsoft Research GLEE (Graph Layout Execution
             Engine) library.  GLEE was developed by Lev Nachmanson of Microsoft
             Research and was available on the Microsoft Research download site as of
             January 2007.
            
             <para>
             The Microsoft.GLEE.dll assembly must be included in the build that uses
             this class.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.SugiyamaLayout.DefaultNodeXLVertexRadius">
            Radius to use for the vertices, in NodeXL coordinates.
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.#ctor">
            <summary>
            Initializes a new instance of the SugiyamaLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.TransformLayoutCore(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Microsoft.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to objects needed to transform the graph's layout.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>,
             this method may get called to transform the graph's layout from one
             rectangle to another.  <paramref name="originalLayoutContext"/>
             contains the original graph rectangle, and <paramref name="newLayoutContext"/> contains the new graph rectangle.  The
             base-class implementation transforms all the graph's vertex locations
             from the original rectangle to the new one.  If the derived <see cref="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)"/> implementation added geometry metadata to the
             graph, the derived class should override this method, transform the
             geometry metadata, and call the base-class implementation to transform
             the graph's vertex locations.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.OnVertexMoveCore(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)"/>.  This method is called
             after the application has changed the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)"/> added geometry metadata to the graph,
             vertices, or edges, <see cref="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.OnVertexMoveCore(Microsoft.NodeXL.Core.IVertex)"/> should modify the
             metadata if necessary.
            
             <para>
             The argument has already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.GetNodeXLVertexRadius(Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Gets the vertex radius to use, in NodeXL coordinates.
             </summary>
            
             <param name="oLayoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <returns> 
             The vertex radius to use, in NodeXL coordinates.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.NodeXLVertexToGleeNode(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Retrieves a GLEE node that has been stored as metadata in a NodeXL
             vertex. 
             </summary>
            
             <param name="oVertex">
             NodeXL vertex.
             </param>
            
             <returns>
             The GLEE node corresponding to <paramref name="oVertex" />.
             </returns>
            
             <remarks>
             This method assumes that the GLEE node has been stored in the vertex's
             metadata using the key ReservedMetadataKeys.SugiyamaGleeNode.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.NodeXLEdgeToGleeEdge(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Retrieves a GLEE edge that has been stored as metadata in a NodeXL
             edge. 
             </summary>
            
             <param name="oEdge">
             NodeXL edge.
             </param>
            
             <returns>
             The GLEE edge corresponding to <paramref name="oEdge" />.
             </returns>
            
             <remarks>
             This method assumes that the GLEE edge has been stored in the edge's
             metadata using the key ReservedMetadataKeys.SugiyamaGleeEdge.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.GetTransformationMatrix(Microsoft.Glee.GleeGraph,System.Drawing.Rectangle)">
             <summary>
             Returns a <see cref="T:System.Drawing.Drawing2D.Matrix"/> that will transform coordinates in the
             graph rectangle computed by the GLEE layout code to coordinates in the
             NodeXL graph rectangle.
             </summary>
            
             <param name="oGleeGraph">
             GLEE graph that has been laid out.
             </param>
            
             <param name="oNodeXLGraphRectangle">
             Rectangle in which the NodeXL graph is being laid out.
             </param>
            
             <returns>
             A <see cref="T:System.Drawing.Drawing2D.Matrix"/> to transform coordinates.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.GleePointToTransformedPointF(Microsoft.Glee.Splines.Point,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Converts a Microsoft.Glee.Splines.Point in GLEE coordinates to a PointF
             in NodeXL coordinates.
             </summary>
            
             <param name="oGleePoint">
             Microsoft.Glee.Splines.Point to convert.
             </param>
            
             <param name="oTransformationMatrix">
             Matrix created by <see cref="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.GetTransformationMatrix(Microsoft.Glee.GleeGraph,System.Drawing.Rectangle)"/>.
             </param>
            
             <returns>
             <paramref name="oGleePoint"/> in GLEE coordinates converted to a
             PointF in NodeXL coordinates.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.GleePointToPointF(Microsoft.Glee.Splines.Point)">
             <summary>
             Converts a Microsoft.Glee.Splines.Point to a PointF.
             </summary>
            
             <param name="oGleePoint">
             Microsoft.Glee.Splines.Point to convert.
             </param>
            
             <returns>
             <paramref name="oGleePoint" /> converted to a PointF.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.GleeCurveToTransformedPointFArray(Microsoft.Glee.Splines.Curve,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Converts a Microsoft.Glee.Splines.Curve to an array of PointF objects
             in NodeXL coordinates.
             </summary>
            
             <param name="oCurve">
             Microsoft.Glee.Splines.Curve to convert.
             </param>
            
             <param name="oTransformationMatrix">
             Matrix created by <see cref="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.GetTransformationMatrix(Microsoft.Glee.GleeGraph,System.Drawing.Rectangle)"/>.
             </param>
            
             <returns>
             An array of PointF objects suitable for drawing with the following
             code, where aoCurvePoints is the returned array:
            
             <code>
             GraphicsPath oGraphicsPath = new GraphicsPath();
             
             oGraphicsPath.AddBeziers(aoCurvePoints);
             
             oGraphics.DrawPath(oPen, oGraphicsPath);
             </code>
            
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.GleeCurveToPointFArray(Microsoft.Glee.Splines.Curve)">
             <summary>
             Converts a Microsoft.Glee.Splines.Curve to an array of PointF objects.
             </summary>
            
             <param name="oCurve">
             Microsoft.Glee.Splines.Curve to convert.
             </param>
            
             <returns>
             An array of PointF objects suitable for drawing with the following
             code, where aoCurvePoints is the returned array:
            
             <code>
             oTransformationMatrix.TransformPoints(aoCurvePoints);
            
             GraphicsPath oGraphicsPath = new GraphicsPath();
             
             oGraphicsPath.AddBeziers(aoCurvePoints);
             
             oGraphics.DrawPath(oPen, oGraphicsPath);
             </code>
            
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SugiyamaLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.PolarAbsoluteLayout">
             <summary>
             Lays out a graph by placing the vertices within a polar coordinate space.
             </summary>
            
             <remarks>
             This layout defines a polar coordinate space that uses (R, Angle) to
             specify a point.
            
             <para>
             R represents the distance of the point from the origin, which is the center
             of the graph rectangle.  0.0 represents the origin, 1.0 represents one WPF
             unit (1/96 inch), and -1 represents one WPF unit in the opposite direction.
             </para>
            
             <para>
             Angle is in degrees.  0.0 represents points on the positive x-axis and 90.0
             represents points on the positive y-axis.  Any angle is valid.  361.0
             degrees is the same as 1.0 degree, for example, and -1.0 degree is the same
             as 359.0 degrees.
             </para>
            
             <para>
             To specify the polar coordinates of a vertex, add the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PolarLayoutCoordinates"/> key to the vertex.
             If a vertex is missing this key, the vertex is placed at the origin.
             </para>
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, its
             location is left unmodified.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.PolarAbsoluteLayout.#ctor">
            <summary>
            Initializes a new instance of the PolarAbsoluteLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.PolarAbsoluteLayout.TransformLayoutCore(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Microsoft.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to objects needed to transform the graph's layout.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Microsoft.NodeXL.Layouts.LayoutBase.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>, this method may get called to
             transform the graph's layout from one rectangle to another.  <paramref name="originalLayoutContext"/> contains the original graph rectangle,
             and <paramref name="newLayoutContext"/> contains the new graph
             rectangle.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.PolarAbsoluteLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.PolarAbsoluteLayout.SupportsOutOfBoundsVertices">
             <summary>
             Gets a flag indicating whether vertices laid out by the class can fall
             outside the graph bounds.
             </summary>
            
             <value>
             true if the vertices call fall outside the graph bounds.
             </value>
            
             <remarks>
             If true, the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> of the laid-out vertices
             may be within the graph rectangle's margin or outside the graph
             rectangle.  If false, the vertex locations are always within the
             margin.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.GraphBinner">
            <summary>
            Lays out a graph's smaller components in bins.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.GraphBinner.BinMargin">
            Margin within each bin.
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GraphBinner.#ctor">
            <summary>
            Initializes a new instance of the GraphBinner class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GraphBinner.LayOutSmallerComponentsInBins(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex}@,System.Drawing.Rectangle@)">
             <summary>
             Lays out a graph's smaller components in bins.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph must have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection must have at least one vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> must have non-zero width and
             height.
             </param>
            
             <param name="remainingVertices">
             Where the vertices that have not been binned get stored if true is
             returned.
             </param>
            
             <param name="remainingRectangle">
             Where the remaining rectangle gets stored if true is returned.
             </param>
            
             <remarks>
             This method splits <paramref name="verticesToLayOut"/> into strongly
             connected components, synchronously lays out each of the smaller
             components using <see cref="T:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout"/>, and places
             the components along the bottom of the rectangle.  If there are any
             vertices remaining and any space remaining, they get stored at
             <paramref name="remainingVertices"/> and <paramref name="remainingRectangle"/> and true is returned.  Otherwise, false is
             returned.
            
             <para>
             If true is returned, the caller should lay out the remaining vertices
             in the remaining rectangle.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GraphBinner.LayOutComponentInBin(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},System.Drawing.Rectangle)">
             <summary>
             Lays out a graph component in a bin.
             </summary>
            
             <param name="oGraph">
             Graph being laid out.
             </param>
            
             <param name="oVerticesInComponent">
             The vertices in the bin.
             </param>
            
             <param name="oBinRectangle">
             The bin rectangle to lay out the vertices within.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GraphBinner.GetRemainingVertices(System.Collections.Generic.IList{System.Collections.Generic.LinkedList{Microsoft.NodeXL.Core.IVertex}},System.Int32)">
             <summary>
             Copies the remaining vertices into an array.
             </summary>
            
             <param name="oComponents">
             The graph's strongly connected components.
             </param>
            
             <param name="iFirstRemainingComponent">
             Index of the first remaining component in <paramref
             name="oComponents" />.
             </param>
            
             <returns>
             A collection of remaining vertices that have not been binned.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GraphBinner.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.GraphBinner.m_iMaximumVerticesPerBin">
            The maximum number of vertices a binned component can have.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.GraphBinner.m_iBinLength">
            Height and width of each bin, in graph rectangle units.
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.GraphBinner.MaximumVerticesPerBin">
             <summary>
             Gets or sets the maximum number of vertices a binned component can
             have.
             </summary>
            
             <value>
             The maximum number of vertices a binned component can have.  The
             default value is 3.
             </value>
            
             <remarks>
             If a strongly connected component of the graph has <see cref="P:Microsoft.NodeXL.Layouts.GraphBinner.MaximumVerticesPerBin"/> vertices or fewer, the component is
             placed in a bin.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.GraphBinner.BinLength">
             <summary>
             Gets or sets the height and width of each bin, in graph rectangle
             units.
             </summary>
            
             <value>
             The height and width of each bin, in graph rectangle units.  The
             default value is 16.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.LayOutGraphAsyncArguments">
             <summary>
             Stores the arguments passed to <see cref="M:Microsoft.NodeXL.Layouts.IAsyncLayout.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.
             </summary>
            
             <remarks>
             <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/> uses an instance of this
             class to pass its arguments to <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayOutGraphAsyncArguments.#ctor(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Layouts.LayOutGraphAsyncArguments"/> class.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayOutGraphAsyncArguments.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.LayOutGraphAsyncArguments.m_oGraph">
            Graph to lay out.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.LayOutGraphAsyncArguments.m_oLayoutContext">
            Provides access to objects needed to lay out the graph.
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.LayOutGraphAsyncArguments.Graph">
             <summary>
             Gets the graph to lay out.
             </summary>
            
             <value>
             The graph to lay out, as an <see cref="T:Microsoft.NodeXL.Core.IGraph"/>.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.LayOutGraphAsyncArguments.LayoutContext">
             <summary>
             Gets the object that provides access to objects needed to lay out the
             graph.
             </summary>
            
             <value>
             Object that provides access to objects needed to lay out the graph, as
             a <see cref="P:Microsoft.NodeXL.Layouts.LayOutGraphAsyncArguments.LayoutContext"/>.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.RectangleBinner">
             <summary>
             Splits a parent rectangle into "bin" rectangles.
             </summary>
            
             <remarks>
             A bin is a small square that fits into a parent rectangle.  This class
             splits the parent into consecutive bins, running from left to right along
             the bottom of the parent and then moving up a row.
            
             <para>
             Pass the parent rectangle to the constructor, along with the length of the
             bin.  Call <see cref="M:Microsoft.NodeXL.Layouts.RectangleBinner.TryGetNextBin(System.Drawing.Rectangle@)"/> to get the next bin, and call <see cref="M:Microsoft.NodeXL.Layouts.RectangleBinner.TryGetRemainingRectangle(System.Drawing.Rectangle@)"/> to get any space not occupied by the
             returned bins.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.RectangleBinner.#ctor(System.Drawing.Rectangle,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Layouts.RectangleBinner"/> class.
             </summary>
            
             <param name="parent">
             The parent rectangle to split into bins.
             </param>
            
             <param name="binLength">
             Length and width of each bin square.  Must be greater than zero.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.RectangleBinner.TryGetNextBin(System.Drawing.Rectangle@)">
             <summary>
             Attempts to get the next bin.
             </summary>
            
             <param name="nextBin">
             Where the bin gets stored if true is returned.
             </param>
            
             <returns>
             true if there is enough room left for another bin.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.RectangleBinner.TryGetRemainingRectangle(System.Drawing.Rectangle@)">
             <summary>
             Attempts to get the remaining space not occupied by the bins that have
             been returned by <see cref="M:Microsoft.NodeXL.Layouts.RectangleBinner.TryGetNextBin(System.Drawing.Rectangle@)"/>.
             </summary>
            
             <param name="remainingRectangle">
             Where the remaining rectangle gets stored if true is returned.
             </param>
            
             <returns>
             true if there is any room remaining.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.RectangleBinner.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.RectangleBinner.m_oParent">
            Parent rectangle to split into bins.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.RectangleBinner.m_iBinLength">
            Length and width of each bin square.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.RectangleBinner.m_oLastBin">
            The last bin returned by TryGetNextBin(), or a bin that is one position
            out of bounds if TryGetNextBin() hasn't been called yet.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.RectangleBinner.m_bBinReturned">
            true if at least one bin has been returned.
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.NullLayout">
             <summary>
             Leaves the graph's vertices in their current location.
             </summary>
            
             <remarks>
             This layout does nothing.  It is meant for use in applications where a
             layout is always performed, but sometimes the layout should do nothing.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.NullLayout.#ctor">
            <summary>
            Initializes a new instance of the NullLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.NullLayout.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.NullLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.NullLayout.SupportsBinning">
             <summary>
             Gets a flag indicating whether binning can be used when the entire
             graph is laid out.
             </summary>
            
             <value>
             true if binning can be used.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.LayoutStyle">
             <summary>
             Specifies the style to use when laying out the graph.
             </summary>
            
             <remarks>
             A layout style specifies an optional special treatment that can be applied
             to the graph's groups or strongly connected components when laying out the
             graph.
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.LayoutStyle.Normal">
            <summary>
            If the entire graph is being laid out, the entire graph rectangle is
            used.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseGroups">
            <summary>
            If the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.GroupInformation"/> key is
            present on the graph and the entire graph is being laid out, each of
            the graph's groups is laid out within a box using the algorithm
            implemented by the <see cref="T:Microsoft.NodeXL.Layouts.IAsyncLayout"/> implementation.  The box
            size is proportional to the number of vertices in the group and the
            boxes are arranged using a squarified treemap algorithm.  Otherwise,
            <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.Normal"/> is used.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseBinning">
            <summary>
            If <see cref="P:Microsoft.NodeXL.Layouts.IAsyncLayout.SupportsBinning"/> is true and the entire
            graph is being laid out, the graph is split into strongly connected
            components, the smaller components are laid out and placed along the
            bottom of the rectangle using the <see cref="T:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout"/>, and the remaining components are
            laid out within the remaining rectangle using the algorithm implemented
            by the <see cref="T:Microsoft.NodeXL.Layouts.IAsyncLayout"/> implementation.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.LayoutMetadataUtil">
             <summary>
             Utility methods for dealing with a graph's layout metadata.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutMetadataUtil.MarkGraphAsLaidOut(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Marks a graph as having been laid out.
             </summary>
            
             <param name="graph">
             Graph that was laid out.
             </param>
            
             <remarks>
             This should be called after <paramref name="graph" /> has been
             successfully laid out.  It adds a metadata key to the graph.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutMetadataUtil.MarkGraphAsNotLaidOut(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Removes the metadata that indicates a graph has been laid out.
             </summary>
            
             <param name="graph">
             The graph to remove the metadata from.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutMetadataUtil.GraphHasBeenLaidOut(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Gets a flag indicating whether a graph has been laid out.
             </summary>
            
             <param name="graph">
             The graph to check.
             </param>
            
             <returns>
             true if the graph has been laid out.
             </returns>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout">
             <summary>
             Lays out a graph using the Fruchterman-Reingold layout.
             </summary>
            
             <remarks>
             For details on the layout algorithm, see
             http://www.cs.ubc.ca/rr/proceedings/spe91-95/spe/vol21/issue11/spe060tf.pdf.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayoutBaseLayoutComplete"/>, the previous
             layout is used as a starting point for the new layout.  Otherwise, the
             locations of all unlocked vertices are randomized at the start of the
             layout process.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <example>
             Here is sample C# code that uses a <see cref="T:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout"/> to synchronously lay out a graph.
            
             <code>
             using System;
             using System.Drawing;
             using Microsoft.NodeXL.Core;
             using Microsoft.NodeXL.Layouts;
            
             namespace PopulateAndLayOutGraph
             {
             class Program
             {
                 static void Main(string[] args)
                 {
                     // Create a graph.  The graph has no visual representation; it is
                     // just a data structure.
            
                     Graph oGraph = new Graph(GraphDirectedness.Directed);
                     IVertexCollection oVertices = oGraph.Vertices;
                     IEdgeCollection oEdges = oGraph.Edges;
            
                     // Add three vertices.
            
                     IVertex oVertexA = oVertices.Add();
                     oVertexA.Name = "Vertex A";
                     IVertex oVertexB = oVertices.Add();
                     oVertexB.Name = "Vertex B";
                     IVertex oVertexC = oVertices.Add();
                     oVertexC.Name = "Vertex C";
            
                     // Connect the vertices with directed edges.
            
                     IEdge oEdge1 = oEdges.Add(oVertexA, oVertexB, true);
                     IEdge oEdge2 = oEdges.Add(oVertexB, oVertexC, true);
                     IEdge oEdge3 = oEdges.Add(oVertexC, oVertexA, true);
            
                     // Lay out the graph within a 100x100 rectangle.  This sets the
                     // IVertex.Location property of each vertex.
            
                     ILayout oLayout = new FruchtermanReingoldLayout();
            
                     LayoutContext oLayoutContext =
                         new LayoutContext(new Rectangle(0, 0, 100, 100));
            
                     oLayout.LayOutGraph(oGraph, oLayoutContext);
            
                     // List the results.
            
                     foreach (IVertex oVertex in oVertices)
                     {
                         Console.WriteLine("The location of {0} is {1}.",
                             oVertex.Name, oVertex.Location);
                     }
                 }
             }
             }
             </code>
            
             </example>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.#ctor">
            <summary>
            Initializes a new instance of the FruchtermanReingoldLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.InitializeMetadata(System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex})">
             <summary>
             Stores required metadata on the graph's vertices before the layout
             begins.
             </summary>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.RemoveMetadata(System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex})">
             <summary>
             Removes metadata from the graph's vertices after the layout is
             complete.
             </summary>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.CalculateRepulsiveForces(System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},System.Single)">
             <summary>
             Calculates the repulsive forces between the vertices.
             </summary>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="k">
             The "k" constant in the Fruchterman-Reingold algorithm.
             </param>
            
             <remarks>
             The results are stored in the FruchtermanReingoldVertexInfo object
             stored in each vertex's Tag.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.CalculateAttractiveForces(System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IEdge},System.Single)">
             <summary>
             Calculates the attractive forces between the vertices.
             </summary>
            
             <param name="edgesToLayOut">
             Edges to lay out.
             </param>
            
             <param name="k">
             The "k" constant in the Fruchterman-Reingold algorithm.
             </param>
            
             <remarks>
             The results are added to the existing FruchtermanReingoldVertexInfo
             object stored in each vertex's Tag.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.SetUnboundedLocations(System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.Single,System.Boolean)">
             <summary>
             Sets the unbounded location of each vertex.
             </summary>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="fTemperature">
             Current temperature.  Must be greater than zero.
             </param>
            
             <param name="bAlsoSetVertexLocations">
             true to also set each vertex's <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/>
             property.
             </param>
            
             <remarks>
             This method is called at the end of each layout iteration.  For each
             vertex, it modifies the vertex's location within an unbounded rectangle
             based on the repulsive and attractive forces that have been calculated
             for the vertex.  If <paramref name="bAlsoSetVertexLocations"/> is
             true, it also transforms that unbounded locations to a point within the
             bounded graph rectangle, and sets each vertex's <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property to that bounded point.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.m_iIterations">
            Number of times the algorithm should run.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.m_fC">
            Gets or sets the constant that determines the strength of the
            attractive and repulsive forces between the vertices.
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.C">
             <summary>
             Gets or sets the constant that determines the strength of the
             attractive and repulsive forces between the vertices.
             </summary>
            
             <value>
             The "C" constant in the "Modelling the forces" section of the
             Fruchterman-Reingold paper.  Must be greater than 0.  The default value
             is 1.0.
             </value>
            
             <remarks>
             Increasing C decreases the attractive forces and increases the
             repulsive forces; decreasing C increases the attractive forces and
             decreases the repulsive forces.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout.Iterations">
             <summary>
             Gets or sets the number of times to run the Fruchterman-Reingold
             algorithm.
             </summary>
            
             <value>
             The number of times to run the Fruchterman-Reingold algorithm when the
             graph is laid out, as an Int32.  Must be greater than zero.  The
             default value is 10.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.GroupVertexInformation">
            <summary>
            Contains information about the vertices that are contained within one
            vertex group.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupVertexInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Layouts.GroupVertexInformation"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupVertexInformation.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.GroupVertexInformation.m_oVertices">
            Collection of the group's vertices.
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.GroupVertexInformation.Vertices">
             <summary>
             Gets a collection of the vertices in the group.
             </summary>
            
             <value>
             A collection of the vertices in the group.  Can be empty but not null.
             The default value is an empty collection.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.FruchtermanReingoldVertexInfo">
             <summary>
             Stores information calculated by <see cref="T:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout"/>
             for one vertex.
             </summary>
            
             <remarks>
             <see cref="T:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout"/> calculates several pieces of
             information about each vertex in the graph being laid out.  Instead of
             storing each piece of information in a separate vertex metadata key, which
             would require multiple key lookups and inefficient boxing and unboxing of
             value types, it stores all the information for the vertex in one instance
             of type <see cref="T:Microsoft.NodeXL.Layouts.FruchtermanReingoldVertexInfo"/> and stores the
             instance in the vertex's Tag.
            
             <para>
             All data is exposed as public fields instead of properties.  That's because
             the method in <see cref="T:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout"/> that calculates
             repulsive forces accesses the data repeatedly in an O(V-squared) loop, and
             property getters are much slower than direct field accesses.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.FruchtermanReingoldVertexInfo.#ctor(System.Drawing.PointF)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Layouts.FruchtermanReingoldVertexInfo"/> class.
             </summary>
            
             <param name="initialLocation">
             The vertex's initial location within the bounded graph rectangle.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.FruchtermanReingoldVertexInfo.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.FruchtermanReingoldVertexInfo.UnboundedLocationX">
            The vertex's location within an unbounded rectangle.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.FruchtermanReingoldVertexInfo.UnboundedLocationY">
            
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.FruchtermanReingoldVertexInfo.DisplacementX">
            The vertex's displacement with respect to its current unbounded
            location.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.FruchtermanReingoldVertexInfo.DisplacementY">
            
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.VertexGridSnapper">
             <summary>
             Snaps vertices to a grid.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.VertexGridSnapper.SnapVerticesToGrid(Microsoft.NodeXL.Core.IGraph,System.Int32)">
             <summary>
             Snaps a graph's vertices to a grid.
             </summary>
            
             <param name="graph">
             Graph whose vertices should be snapped to a grid.  The graph should
             already have been laid out.
             </param>
            
             <param name="gridSize">
             Distance between gridlines.  Must be greater than zero.
             </param>
            
             <remarks>
             This method can be used to separate vertices that obscure each other
             by snapping them to the nearest grid location, using a specified grid
             size.  The graph should be laid out before this method is called.
            
             <para>
             Snapping the vertices to a grid can cause them to fall outside the
             rectangle in which they were originally laid out.  If the
             Visualization.Wpf.VertexDrawer class is used to draw the vertices, that
             class will automatically take care of moving such vertices back within
             the rectangle.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.VertexGridSnapper.SnapCoordinateToGrid(System.Single,System.Single)">
             <summary>
             Snaps an x- or y-coordinate to a grid.
             </summary>
            
             <param name="fCoordinate">
             The x- or y-coordinate to snap to a grid.
             </param>
            
             <param name="fGridSize">
             Distance between gridlines.  Must be an itegral multiple greater than
             zero.
             </param>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker">
             <summary>
             Contains methods that check method arguments and property values.
             </summary>
            
             <remarks>
             This can be used by a class that wants to check values passed to its
             property setters and arguments passed to its methods.  The CheckXXX()
             methods in this class throw an exception if a parameter value or method
             argument is invalid.
            
             <para>
             This class is marked internal to avoid compiler error CS0433 ("The
             type ... exists in both ...") when an executable references two or more
             assemblies that use this class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ArgumentChecker class.
             </summary>
            
             <param name="sOwnerClassName">
             Class name of the object that created this object.  The class name gets
             prepended to all exception messages.  Sample: "MyClass".
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNull(System.String,System.Object)">
             <summary>
             Throws an exception if a property value is null.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEmpty(System.String,System.String)">
             <summary>
             Throws an exception if a string property value is null or has a length
             of zero.
             </summary>
            
             <param name="sPropertyName">
             Name of the string property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Double)">
             <summary>
             Throws an exception if a Double property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Decimal)">
             <summary>
             Throws an exception if a Decimal property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="decPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNegative(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is negative.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
            
             <param name="sInvalidValue">
             Invalid value for <paramref name="sPropertyValue" />.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iInvalidValue">
             Invalid value for <paramref name="iPropertyValue" />.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="iMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Single,System.Single,System.Single)">
             <summary>
             Throws an exception if a Single property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="fPropertyValue">
             Property value to check.
             </param>
            
             <param name="fMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="fMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyIsDefined(System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a property value is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oPropertyValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNull(System.String,System.String,System.Object)">
             <summary>
             Throws an exception if a method argument is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotEmpty(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string method argument is null or has a length
             of zero.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="sArgumentValue">
             Argument value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentIsDefined(System.String,System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a method argument is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oArgumentValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is an inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is no inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is an inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is no inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.m_sOwnerClassName">
            Class name of the object that created this object.
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.GroupMetadataManager">
             <summary>
             Manages the metadata that gets stored on the graph during layout when <see cref="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayoutStyle"/> is set to <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupMetadataManager.OnLayoutBegin(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Performs required tasks when a layout begins.
             </summary>
            
             <param name="graph">
             The graph being laid out.
             </param>
            
             <remarks>
             This method should be called at the beginning of the layout process,
             regardless of the value of <see cref="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayoutStyle"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupMetadataManager.OnLayoutUsingGroupsEnd(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.IList{Microsoft.NodeXL.Layouts.GroupVertexInformation},System.Drawing.Rectangle[],System.Double,System.Boolean)">
             <summary>
             Performs required tasks when a layout with the style <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseGroups"/> ends.
             </summary>
            
             <param name="graph">
             The graph being laid out.
             </param>
            
             <param name="laidOutGroups">
             List of <see cref="T:Microsoft.NodeXL.Layouts.GroupVertexInformation"/> objects, one for each
             group of vertices that was laid out.  These are sorted in descending
             order of the number of vertices in each group.  There is at least one
             vertex in each group.
             </param>
            
             <param name="groupRectangles">
             An array of calculated rectangles.  There is a one-to-one
             correspondence between the rectangles and the <see cref="T:Microsoft.NodeXL.Layouts.GroupVertexInformation"/> objects in <paramref name="laidOutGroups"/>.  Some of the rectangles may be empty.
             </param>
            
             <param name="groupRectanglePenWidth">
             The width of the pen used to draw group rectangles.  If 0, group
             rectangles aren't drawn.
             </param>
            
             <param name="hideIntergroupEdges">
             true to hide the edges between groups.
             </param>
            
             <remarks>
             This method should be called at the end of the layout process if <see cref="P:Microsoft.NodeXL.Layouts.AsyncLayoutBase.LayoutStyle"/> is <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupMetadataManager.TryGetGroupRectangles(Microsoft.NodeXL.Core.IGraph,System.Drawing.Rectangle[]@)">
             <summary>
             Attempts to get the group rectangles stored in a graph's metadata.
             </summary>
            
             <param name="graph">
             The graph to get the group rectangles from.
             </param>
            
             <param name="groupRectangles">
             Where the group rectangles get stored if true is returned.
             </param>
            
             <returns>
             true if the group rectangles were obtained.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupMetadataManager.TransformGroupRectangles(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext,Microsoft.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's group rectangles if they exist.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Microsoft.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Microsoft.NodeXL.Layouts.ILayout.LayOutGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to objects needed to transform the graph's layout.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupMetadataManager.TryGetEdgeVisibility(Microsoft.NodeXL.Core.IEdge,System.String,Microsoft.NodeXL.Core.VisibilityKeyValue@)">
             <summary>
             Attempts to get a visibility value from an edge.
             </summary>
            
             <param name="oEdge">
             The edge to get the visibility value from.
             </param>
            
             <param name="sKey">
             Name of the key where the visibility is stored.
             </param>
            
             <param name="eVisibility">
             Where the visibility value gets stored if true is returned.
             </param>
            
             <returns>
             true if the visibility was obtained.
             </returns>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.SinusoidHorizontalLayout">
             <summary>
             Lays out a graph by placing the vertices on a horizontal sine wave.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on one cycle of a sine wave that
             spans the rectangle horizontally from left to right.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.SinusoidLayout">
             <summary>
             Lays out a graph by placing the vertices on a horizontal or vertical sine
             wave.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on one cycle of a sine wave that
             spans the rectangle either horizontally or vertically.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/>, it is included in layout
             calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.SortableLayoutBase">
             <summary>
             Base class for layouts that support vertex sorting and selective layout.
             </summary>
            
             <remarks>
             This is the base class for several layouts that support vertex sorting and
             the layout of a subset of the graph's vertices.  The derived class must
             implement the <see cref="M:Microsoft.NodeXL.Layouts.SortableLayoutBase.LayOutGraphCoreSorted(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)"/> abstract method.
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will sort them.
             </para>
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SortableLayoutBase.#ctor">
            <summary>
            Initializes a new instance of the SortableLayoutBase class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SortableLayoutBase.UseMetadataVertexSorter(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Tells the layout to sort the vertices by layout order.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <remarks>
             If <paramref name="graph"/> has the key <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.SortableLayoutOrderSet"/>, this method sets
             the <see cref="P:Microsoft.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will sort
             the graph's vertices by the values contained in the vertices' <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.SortableLayoutOrder"/> keys.  Otherwise, it
             sets the <see cref="P:Microsoft.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to null.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SortableLayoutBase.LayOutGraphCore(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SortableLayoutBase.LayOutGraphCoreSorted(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SortableLayoutBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.SortableLayoutBase.m_oVertexSorter">
            The vertex sorter to use to sort the vertices before they are laid out,
            or null if the vertices should not be sorted.
        </member>
        <member name="P:Microsoft.NodeXL.Layouts.SortableLayoutBase.VertexSorter">
             <summary>
             Gets or sets the vertex sorter to use.
             </summary>
            
             <value>
             The vertex sorter to use to sort the vertices before they are laid out,
             as an <see cref="T:Microsoft.NodeXL.Core.IVertexSorter"/>, or null if the vertices should not
             be sorted.
             </value>
            
             <remarks>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will sort them.  The
             ByMetadataVertexSorter and ByDelegateVertexSorter classes can be used
             for this.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SinusoidLayout.#ctor(System.Boolean,System.Double)">
             <summary>
             Initializes a new instance of the SinusoidLayout class.
             </summary>
            
             <param name="isHorizontal">
             true for a sine wave that runs from left to right, false for top to
             bottom.
             </param>
            
             <param name="cycleLength">
             Length of the sine wave cycle, in radians.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SinusoidLayout.LayOutGraphCoreSorted(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SinusoidLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.SinusoidLayout.m_bIsHorizontal">
            true for a sine wave that runs from left to right, false for top to
            bottom.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.SinusoidLayout.m_dCycleLength">
            Length of the sine wave cycle, in radians.
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SinusoidHorizontalLayout.#ctor">
            <summary>
            Initializes a new instance of the SinusoidHorizontalLayout class.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.SinusoidVerticalLayout">
             <summary>
             Lays out a graph by placing the vertices on a vertical sine wave.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on one cycle of a sine wave that
             spans the rectangle vertically from top to bottom.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/>, it is included in layout
             calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SinusoidVerticalLayout.#ctor">
            <summary>
            Initializes a new instance of the SinusoidVerticalLayout class.
            </summary>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.AppLib.SinglePolarCoordinates">
             <summary>
             Represents a point specified in polar coordinates, using a Single for the
             <see cref="P:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.R"/> and <see cref="P:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.Angle"/> properties.
             </summary>
            
             <remarks>
             An instance of this class specifies a point in polar coordinates using a
             distance from the origin <see cref="P:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.R"/>, and
             an angle <see cref="P:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.Angle"/>.  The units and
             limits are defined by the application, not by this class.
             </remarks>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2">
             <summary>
             Represents a point specified in polar coordinates.
             </summary>
            
             <typeparam name="TR">
             Type of the <see cref="P:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.R"/> property.
             </typeparam>
            
             <typeparam name="TAngle">
             Type of the <see cref="P:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.Angle"/> property.
             </typeparam>
            
             <remarks>
             An instance of this class specifies a point in polar coordinates using a
             distance from the origin <see cref="P:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.R"/>, and an angle <see cref="P:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.Angle"/>.  The coordinate types, units, and limits are defined by
             the application, not by this class.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.#ctor">
             <overloads>
             Initializes a new instance of the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2"/> class.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2"/> class using default coordinates.
             </summary>
            
             <remarks>
             The coordinates are set to the default values for TR and TAngle.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.#ctor(`0,`1)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2"/> class using specified
             coordinates.
             </summary>
            
             <param name="r">
             The distance of the point from the origin.
             </param>
            
             <param name="angle">
             The angle of the point, in a counterclockwise rotation from the
             positive x-axis.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.m_oR">
            The distance of the point from the origin.
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.m_oAngle">
            The angle of the point, in a counterclockwise rotation from the
            positive x-axis.
        </member>
        <member name="P:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.R">
             <summary>
             Gets or sets the distance of the point from the origin.
             </summary>
            
             <value>
             The distance of the point from the origin.  The units and limits are
             defined by the application, not by this class.
             </value>
        </member>
        <member name="P:Microsoft.Research.CommunityTechnologies.AppLib.PolarCoordinates`2.Angle">
             <summary>
             Gets or sets the angle of the point.
             </summary>
            
             <value>
             The angle of the point, in a counterclockwise rotation from the
             positive x-axis.  The units and limits are defined by the application,
             not by this class.
             </value>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.SinglePolarCoordinates.#ctor(System.Single,System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.SinglePolarCoordinates"/>
             class using specified coordinates.
             </summary>
            
             <param name="r">
             The distance of the point from the origin.
             </param>
            
             <param name="angle">
             The angle of the point, in a counterclockwise rotation from the
             positive x-axis.
             </param>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.LayoutSaver">
             <summary>
             Saves and restores a layout.
             </summary>
            
             <remarks>
             Pass a laid-out graph to the constructor, which saves the graph's vertex
             locations.   Call <see cref="M:Microsoft.NodeXL.Layouts.LayoutSaver.RestoreLayout"/> to restore the vertices to
             their saved locations.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutSaver.#ctor(Microsoft.NodeXL.Core.IGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Layouts.LayoutSaver"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutSaver.RestoreLayout">
            <summary>
            Restores the graph's vertices to their saved locations.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.LayoutSaver.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.LayoutSaver.m_oGraph">
            Graph whose vertex locations have been saved in m_oVertexLocations.
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.LayoutSaver.m_oVertexLocations">
            Dictionary that contains one key/value pair for each of the graph's
            vertices.  The key is the IVertex.ID and the value is the vertex
            location, as a PointF.
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.CircleLayout">
             <summary>
             Lays out a graph by placing the vertices on a circle.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on a circle whose diameter is the
             smaller of the rectangle's dimensions.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.CircleLayout.#ctor">
            <summary>
            Initializes a new instance of the CircleLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.CircleLayout.LayOutGraphCoreSorted(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.CircleLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.GroupRectangleCalculator">
             <summary>
             Calculates a rectangle for each group of vertices.
             </summary>
            
             <remarks>
             This class is used when a LayoutStyle of <see cref="F:Microsoft.NodeXL.Layouts.LayoutStyle.UseGroups"/> is specified.
            
             <para>
             All methods are static.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupRectangleCalculator.CalculateGroupRectangles(System.Drawing.Rectangle,System.Collections.Generic.IList{Microsoft.NodeXL.Layouts.GroupVertexInformation})">
             <summary>
             Calculates a rectangle for each group of vertices.
             </summary>
            
             <param name="graphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out within.
             </param>
            
             <param name="sortedGroups">
             List of <see cref="T:Microsoft.NodeXL.Layouts.GroupVertexInformation"/> objects, one for each
             group of vertices.  Must be sorted in descending order of the number of
             vertices in each group.  There must be at least one vertex in each
             group.
             </param>
            
             <returns>
             An array of calculated rectangles.  There is a one-to-one
             correspondence between the rectangles and the <see cref="T:Microsoft.NodeXL.Layouts.GroupVertexInformation"/> objects in <paramref name="sortedGroups"/>.  Some of the rectangles may be empty.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupRectangleCalculator.GetAreaPerVertex(System.Drawing.Rectangle,System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Layouts.GroupVertexInformation})">
             <summary>
             Returns the area within the graph rectangle that will be taken up by
             each vertex.
             </summary>
            
             <param name="oGraphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out within.
             </param>
            
             <param name="oGroups">
             GroupVertexInformation objects.
             </param>
             
             <returns>
             Area within oGroupRectangle to allocate to each vertex.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupRectangleCalculator.InsertGroupsIntoRectangle(System.Collections.Generic.IList{Microsoft.NodeXL.Layouts.GroupVertexInformation},System.Drawing.RectangleF[],System.Drawing.RectangleF,System.Int32,System.Int32,System.Double,System.Double)">
             <summary>
             Inserts a set of groups into a parent rectangle.
             </summary>
            
             <param name="oSortedGroups">
             List of <see cref="T:Microsoft.NodeXL.Layouts.GroupVertexInformation"/> objects, one for each
             group of vertices.  Must be sorted in descending order of the number of
             vertices in each group.  There must be at least one vertex in each
             group.
             </param>
            
             <param name="aoGroupRectangles">
             Array of rectangles, one for each group in <paramref name="oSortedGroups"/>.
             </param>
            
             <param name="oParentRectangle">
             Parent rectangle the groups should be laid out within.  Can't be empty
             -- must have positive width and height.
             </param>
             
             <param name="iIndexOfFirstGroupToInsert">
             Zero-based index of the first group in <paramref name="oSortedGroups"/> to insert.
             </param>
            
             <param name="iIndexOfLastGroupToInsert">
             Zero-based index of the last group in <paramref name="oSortedGroups"/> to insert.
             </param>
            
             <param name="dVerticesSum">
             Sum of the vertex counts for the groups to be inserted.  Must be
             greater than zero.
             </param>
            
             <param name="dAreaPerVertex">
             The area within the graph rectangle that will be taken up by each
             vertex.
             </param>
             
             <remarks>
             This method inserts the specified groups in <paramref name="oSortedGroups"/> into <paramref name="oParentRectangle"/>.
            
             <para>
             If the rectangle is wider than it is tall, the groups are inserted on
             top of each other so that they fill the left part of the rectangle
             from top to bottom.  That probably leaves some space on the right side
             of the rectangle.
             </para>
            
             <para>
             If the rectangle is taller than it is wide, the groups are inserted to
             the right of each other so that they fill the or top of the rectangle,
             from left to right.  That probably leaves some space at the top or
             bottom of the rectangle.
             </para>
            
             <para>
             The algorithm presented in "Squarified Treemaps," by Mark Bruls, Kees
             Huizing, and Jarke J. van Wijk, always inserts larger groups at the
             lower left corner of the parent rectangle.  This method modifies the
             algorithm to insert larger groups at the upper left corner instead.
             </para>
            
             <para>
             Note that the results of this method call may not be optimal.  It's up
             to the caller to determine whether the results are good and to take
             corrective action if they are not.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupRectangleCalculator.GetRemainingEmptySpace(System.Collections.Generic.IList{Microsoft.NodeXL.Layouts.GroupVertexInformation},System.Drawing.RectangleF[],System.Drawing.RectangleF,System.Int32,System.Int32)">
             <summary>
             Returns a rectangle that contains the empty space not already filled by
             a set of inserted groups.
             </summary>
            
             <param name="oSortedGroups">
             List of <see cref="T:Microsoft.NodeXL.Layouts.GroupVertexInformation"/> objects, one for each
             group of vertices.  Must be sorted in descending order of the number of
             vertices in each group.  There must be at least one vertex in each
             group.
             </param>
            
             <param name="aoGroupRectangles">
             Array of rectangles, one for each group in <paramref name="oSortedGroups"/>.
             </param>
            
             <param name="oParentRectangle">
             Parent rectangle the groups should be laid out within.  Can't be empty
             -- must have positive width and height.
             </param>
             
             <param name="iIndexOfFirstInsertedGroup">
             Zero-based index of the first group that has already been inserted into
             <paramref name="oParentRectangle"/>.
             </param>
             
             <param name="iIndexOfLastInsertedGroup">
             Zero-based index of the last group that has already been inserted into
             <paramref name="oParentRectangle"/>.
             </param>
             
             <returns>
             New rectangle that contains the empty space.  May be empty.
             </returns>
             
             <remarks>
             If there is no empty space left, an empty rectangle is returned.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupRectangleCalculator.CalculateAspectRatio(System.Drawing.RectangleF)">
             <summary>
             Calculates the aspect ratio of a rectangle.
             </summary>
            
             <param name="oRectangle">
             The rectangle to calculate the aspect ratio for.
             </param>
            
             <returns>
             Aspect ratio of the rectangle.
             </returns>
            
             <remarks>
             The aspect ratio is the ratio of the rectangle's longer dimension to
             its shorter dimension.  If the shorter dimension has a length of zero,
             Double.MaxValue is returned.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GroupRectangleCalculator.RectangleFsToRectangles(System.Drawing.RectangleF[])">
             <summary>
             Converts an array of RectangleF objects to an array of Rectangle
             objects.
             </summary>
            
             <param name="aoRectangleFs">
             The array of RectangleF objects to convert.
             </param>
            
             <returns>
             A new array of Rectangle objects.
             </returns>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.SpiralLayout">
             <summary>
             Lays out a graph by placing the vertices on a spiral.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on a spiral scaled to the smaller of
             the rectangle's dimensions.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Layouts.SpiralLayout.MaximumSpiralAngle">
            Maximum angle of the spiral, in radians.
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SpiralLayout.#ctor">
            <summary>
            Initializes a new instance of the SpiralLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SpiralLayout.LayOutGraphCoreSorted(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.SpiralLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Layouts.GridLayout">
             <summary>
             Lays out a graph by placing the vertices on a grid.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on a simple grid.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GridLayout.#ctor">
            <summary>
            Initializes a new instance of the GridLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GridLayout.LayOutGraphCoreSorted(Microsoft.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NodeXL.Layouts.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GridLayout.GetRowsAndColumns(System.Collections.Generic.ICollection{Microsoft.NodeXL.Core.IVertex},Microsoft.NodeXL.Layouts.LayoutContext,System.Int32@,System.Int32@)">
             <summary>
             Gets the number of rows and columns to use in the grid.
             </summary>
            
             <param name="oVerticesToLayOut">
             Vertices to lay out.
             </param>
            
             <param name="oLayoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <param name="iRows">
             Where the number of grid rows gets stored.
             </param>
            
             <param name="iColumns">
             Where the number of grid columns gets stored.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GridLayout.RowsAndColumnsAreSufficient(System.Int32,System.Int32,System.Int32)">
             <summary>
             Determines whether a calculated number of rows and columns are
             sufficient to display all the vertices.
             </summary>
            
             <param name="iRows">
             Calculated number of rows.
             </param>
            
             <param name="iColumns">
             Calculated number of columns.
             </param>
            
             <param name="iVertices">
             Number of vertices.
             </param>
            
             <returns>
             true if the rows and columns are sufficient.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Layouts.GridLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
    </members>
</doc>
